/**
 * @author lalit goyal
 */
public final class ShortestPathFinderAlgorithm {

	public Map<String, Integer> findAllPossiblePathsBetweenTwoNodes(Map<String, Node> graphMap, String startingNode,
			String destinationNode) {
		// Memory Reference operation
		Stack<String[]> depthFirstTraverseStack = new Stack<String[]>();
		// Arithmetic operation of adding the element into the Stack
		depthFirstTraverseStack.push(new String[] { startingNode, "0" });
		// Memory reference operation
		Stack<String[]> buildPathStack = new Stack<String[]>();
		// Memory reference operation
		Map<String, Integer> mapOfAllPossiblePathsBtwTwoNodes = new HashMap<>();
		// Primitive operation to check for the size
		while (depthFirstTraverseStack.size() > 0) {
			// Arithmetic operation of looking at the top element of the stack
			String[] currentNodeInfo = depthFirstTraverseStack.peek();
			// O(n)
			if (currentNodeInfo[0].equalsIgnoreCase(destinationNode))
				addNewPathToPossiblePathsList(depthFirstTraverseStack, buildPathStack,
						mapOfAllPossiblePathsBtwTwoNodes);
			else {
				// Primitive operation to calculate the size
				// Check for the equals ignore
				if (buildPathStack.size() > 0 && currentNodeInfo[0].equalsIgnoreCase(buildPathStack.peek()[0])) {
					// Arithmetic operations of removing the elements from stack
					depthFirstTraverseStack.pop();
					// Arithmetic operations of removing the elements from stack
					buildPathStack.pop();
				} else {
					// Arithmetic operation of getting the node object
					Node node = graphMap.get(currentNodeInfo[0]);
					if (!isCurrentNodeAlreadyExistInDFTStack(depthFirstTraverseStack, currentNodeInfo[0])
							&& isEgdeExistsForCurrentNode(depthFirstTraverseStack, currentNodeInfo[0], node)) {
						// O(e) where e is the number of the edges
						addAllConnectedNodesToDFTStack(depthFirstTraverseStack, node);
						// Arithmetic operation of adding the element to the
						// stack DS
						buildPathStack.push(currentNodeInfo);
					} else {
						// Arithmetic operation of adding the element to the
						// stack DS
						depthFirstTraverseStack.pop();
					}
				}
			}
		}
		return sortMapByValueAscending(mapOfAllPossiblePathsBtwTwoNodes);
	}

	private Map<String, Integer> sortMapByValueAscending(Map<String, Integer> mapOfAllPossiblePathsBtwTwoNodes) {
		// Memory reference operation
		ValueComparator vc = new ValueComparator(mapOfAllPossiblePathsBtwTwoNodes);
		// Memory reference operation
		TreeMap<String, Integer> sortedMapOfAllPossiblePathsBtwTwoNodes = new TreeMap<String, Integer>(vc);
		// O(mapOfAllPossiblePathsBtwTwoNodes.size())
		sortedMapOfAllPossiblePathsBtwTwoNodes.putAll(mapOfAllPossiblePathsBtwTwoNodes);
		return sortedMapOfAllPossiblePathsBtwTwoNodes;
	}

	private void addNewPathToPossiblePathsList(Stack<String[]> depthFirstTraverseStack, Stack<String[]> buildPathStack,
			Map<String, Integer> mapOfAllPossiblePathsBtwTwoNodes) {
		// Arithmetic operation to add the element the stack
		buildPathStack.push(depthFirstTraverseStack.pop());
		// O(n)
		List<String[]> listDeepCopy = deepCopyOfList(buildPathStack.list());
		// O(n)
		pathAlongWithDistance(mapOfAllPossiblePathsBtwTwoNodes, listDeepCopy);
		// Arithmetic operation of removing the element from the stack
		buildPathStack.pop();
	}

	private boolean isCurrentNodeAlreadyExistInDFTStack(Stack<String[]> depthFirstTraverseStack, String currentNode) {
		return isDuplicateElementInStringArrayList(depthFirstTraverseStack.list(), currentNode);
	}

	// Primitive operation
	private boolean isEgdeExistsForCurrentNode(Stack<String[]> depthFirstTraverseStack, String currentNode, Node node) {
		return node != null && node.getEdgeList().size() > 0;
	}

	private void addAllConnectedNodesToDFTStack(Stack<String[]> depthFirstTraverseStack, Node node) {
		// Adding the all edges to the given node
		// O(e) where e is the number of the edges
		for (Edge edge : node.getEdgeList())
			depthFirstTraverseStack.push(new String[] { edge.getConnectedNodeName(), edge.getEdgeName() });
	}

	private Map<String, Integer> pathAlongWithDistance(Map<String, Integer> mapOfAllPossiblePathsBtwTwoNodes,
			List<String[]> path) {
		String pathName = "[";
		int totalDistance = 0;
		for (String[] stringArray : path) {
			pathName = pathName + stringArray[0] + ",";
			totalDistance = totalDistance + Integer.valueOf(stringArray[1]);
		}
		mapOfAllPossiblePathsBtwTwoNodes.put(pathName.substring(0, pathName.lastIndexOf(",")) + "]", totalDistance);
		return mapOfAllPossiblePathsBtwTwoNodes;
	}
}
